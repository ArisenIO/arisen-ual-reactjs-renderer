{"version":3,"sources":["../../../src/components/provider/UALProvider.js"],"names":["UALProvider","props","type","availableAuthenticators","loggedIn","filter","auth","constructor","name","length","clearCache","autoLoginAuthenticator","authenticateWithoutAccountInput","state","setState","message","i18n","t","window","localStorage","removeItem","authenticator","logout","catch","e","console","warn","chains","authenticators","appName","modal","loading","users","activeAuthenticator","activeUser","isAutoLogin","error","hideModal","showModal","forEach","reset","DEFAULT_STATUS","fullLogout","restart","broadcastStatus","status","authenticatorName","getStyle","text","login","getAccountName","accountName","setItem","submitAccountForLogin","accountInput","requiresGetKeyConfirmation","getItem","ual","UAL","getAuthenticators","getAuthenticatorInstance","Error","availableCheck","setInterval","isLoading","clearInterval","msg","source","errType","UALErrorType","Login","UALError","fetchAuthenticators","modalStyles","baseFont","children","Component","propTypes","PropTypes","arrayOf","object","isRequired","oneOfType","node","string","bool","defaultProps"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;IAGaA,W;;;;;AACX,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,qFAAMA,KAAN;AACA;;;;AAFiB,uGAgQQ,UAACC,IAAD,EAAOC,uBAAP,EAAmC;AAC5D,UAAMC,QAAQ,GAAGD,uBAAuB,CAACE,MAAxB,CAA+B,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,WAAL,CAAiBC,IAAjB,KAA0BN,IAA9B;AAAA,OAAnC,CAAjB;;AACA,UAAI,CAACE,QAAQ,CAACK,MAAd,EAAsB;AACpB,cAAKC,UAAL;AACD;;AACD,aAAON,QAAQ,CAACK,MAAT,GAAkBL,QAAQ,CAAC,CAAD,CAA1B,GAAgC,KAAvC;AACD,KAtQkB;;AAAA,kGA+QG,UAACD,uBAAD,EAA0BQ,sBAA1B,EAAqD;AAAA,UACjEC,+BADiE,GAC7B,MAAKC,KADwB,CACjED,+BADiE;;AAEzE,UAAID,sBAAJ,EAA4B;AAC1B,cAAKG,QAAL,CAAc;AAAEX,UAAAA,uBAAuB,EAAE,CAACQ,sBAAD;AAA3B,SAAd,EAAqE,YAAM;AACzEC,UAAAA,+BAA+B,CAACD,sBAAD,EAAyB,IAAzB,CAA/B;AACD,SAFD;AAGD,OAJD,MAIO;AACL,cAAKG,QAAL,CAAc;AAAEX,UAAAA,uBAAuB,EAAvBA;AAAF,SAAd,EAA2C,YAAM;AAC/C,gBAAKW,QAAL,CAAc;AAAEC,YAAAA,OAAO,EAAEC,cAAKC,CAAL,CAAO,sBAAP;AAAX,WAAd;AACD,SAFD;AAGD;AACF,KA1RkB;;AAAA,yFAiSN,YAAM;AACjBC,MAAAA,MAAM,CAACC,YAAP,CAAoBC,UAApB,CAA+B,qBAA/B;AACAF,MAAAA,MAAM,CAACC,YAAP,CAAoBC,UAApB,CAA+B,gBAA/B;AACD,KApSkB;;AAAA,yFA4SN,UAACC,aAAD,EAAmB;AAC9B,YAAKX,UAAL;;AACAW,MAAAA,aAAa,CAACC,MAAd,GACGC,KADH,CACS,UAAAC,CAAC;AAAA,eAAIC,OAAO,CAACC,IAAR,CAAaF,CAAb,CAAJ;AAAA,OADV;AAED,KAhTkB;;AAKjB,UAAKX,KAAL,GAAa;AACX;;;;;AAKAc,MAAAA,MAAM,EAAE1B,KAAK,CAAC0B,MANH;;AAOX;;;;;AAKAC,MAAAA,cAAc,EAAE3B,KAAK,CAAC2B,cAZX;;AAaX;;;;;AAKAzB,MAAAA,uBAAuB,EAAE,EAlBd;;AAmBX;;;;;AAKA0B,MAAAA,OAAO,EAAE5B,KAAK,CAAC4B,OAxBJ;;AAyBX;;;;;AAKAC,MAAAA,KAAK,EAAE7B,KAAK,CAAC6B,KA9BF;;AA+BX;;;;;AAKAC,MAAAA,OAAO,EAAE,KApCE;;AAqCX;;;;;AAKAC,MAAAA,KAAK,EAAE,EA1CI;;AA2CX;;;;;AAKAC,MAAAA,mBAAmB,EAAE,IAhDV;;AAiDX;;;;;AAKAC,MAAAA,UAAU,EAAE,IAtDD;;AAuDX;;;;;AAKAC,MAAAA,WAAW,EAAE,KA5DF;;AA6DX;;;;;AAKAC,MAAAA,KAAK,EAAE,IAlEI;;AAmEX;;;;;AAKArB,MAAAA,OAAO,EAAE,EAxEE;;AAyEX;;;;;;;AAOAsB,MAAAA,SAAS,EAAE;AAAA,eAAM,MAAKvB,QAAL,CAAc;AAAEgB,UAAAA,KAAK,EAAE,KAAT;AAAgBC,UAAAA,OAAO,EAAE,IAAzB;AAA+BhB,UAAAA,OAAO,EAAEC,cAAKC,CAAL,CAAO,uBAAP;AAAxC,SAAd,CAAN;AAAA,OAhFA;;AAiFX;;;;;;;AAOAqB,MAAAA,SAAS,EAAE,qBAAM;AAAA,YACPnC,uBADO,GACqB,MAAKU,KAD1B,CACPV,uBADO;AAEfA,QAAAA,uBAAuB,CAACoC,OAAxB,CAAgC,UAAAjC,IAAI;AAAA,iBAAIA,IAAI,CAACkC,KAAL,EAAJ;AAAA,SAApC;;AACA,cAAK1B,QAAL,CAAc;AAAEgB,UAAAA,KAAK,EAAE;AAAT,SAAd;AACD,OA5FU;;AA6FX;;;;;;;AAOAR,MAAAA,MAAM,EAAE,kBAAM;AAAA,YACJW,mBADI,GACoB,MAAKpB,KADzB,CACJoB,mBADI;;AAEZ,cAAKnB,QAAL,CAAc2B,wBAAd,EAA8B;AAAA,iBAAMR,mBAAmB,IAAI,MAAKS,UAAL,CAAgBT,mBAAhB,CAA7B;AAAA,SAA9B;AACD,OAvGU;;AAwGX;;;;;;;AAOAU,MAAAA,OAAO,EAAE,mBAAM;AACb,cAAK7B,QAAL,CAAc;AAAE2B,UAAAA,cAAc,EAAdA;AAAF,SAAd,EAAkC,YAAM;AAAA,cAC9BtC,uBAD8B,GACF,MAAKU,KADH,CAC9BV,uBAD8B;AAEtCA,UAAAA,uBAAuB,CAACoC,OAAxB,CAAgC,UAAAjC,IAAI;AAAA,mBAAIA,IAAI,CAACkC,KAAL,EAAJ;AAAA,WAApC;;AACA,gBAAK1B,QAAL,CAAcX,uBAAd;AACD,SAJD;AAKD,OArHU;;AAsHX;;;;;;;AAOAyC,MAAAA,eAAe,EAAE;AAAA,YAACC,MAAD,uEAAUJ,wBAAV;AAAA,eAA6B,MAAK3B,QAAL,CAAc+B,MAAd,CAA7B;AAAA,OA7HN;;AA8HX;;;;;;;;;AASAjC,MAAAA,+BAA+B;AAAA;AAAA;AAAA,gCAAE,iBAAOS,aAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsBc,kBAAAA,WAAtB,2DAAoC,KAApC;AACvBS,kBAAAA,eADuB,GACH,MAAK/B,KADF,CACvB+B,eADuB;AAE/BA,kBAAAA,eAAe,CAAC;AACdb,oBAAAA,OAAO,EAAE,IADK;AAEdhB,oBAAAA,OAAO,EAAEC,cAAKC,CAAL,CAAO,2BAAP,EAAoC;AAAE6B,sBAAAA,iBAAiB,EAAEzB,aAAa,CAAC0B,QAAd,GAAyBC;AAA9C,qBAApC,CAFK;AAGdf,oBAAAA,mBAAmB,EAAEZ;AAHP,mBAAD,CAAf;AAF+B;AAAA;AAAA,yBAQTA,aAAa,CAAC4B,KAAd,EARS;;AAAA;AAQvBjB,kBAAAA,KARuB;AAAA;AAAA,yBASHA,KAAK,CAAC,CAAD,CAAL,CAASkB,cAAT,EATG;;AAAA;AASvBC,kBAAAA,WATuB;;AAU7B,sBAAI,CAAChB,WAAL,EAAkB;AAChBjB,oBAAAA,MAAM,CAACC,YAAP,CAAoBiC,OAApB,CAA4B,qBAA5B,EAAmD/B,aAAa,CAACd,WAAd,CAA0BC,IAA7E;AACD;;AACDoC,kBAAAA,eAAe,CAAC;AACdV,oBAAAA,UAAU,EAAEF,KAAK,CAACA,KAAK,CAACvB,MAAN,GAAe,CAAhB,CADH;AAEduB,oBAAAA,KAAK,EAALA,KAFc;AAGdG,oBAAAA,WAAW,EAAXA,WAHc;AAIdpB,oBAAAA,OAAO,EAAEC,cAAKC,CAAL,CAAO,qBAAP,EAA8B;AAAEkC,sBAAAA,WAAW,EAAXA;AAAF,qBAA9B;AAJK,mBAAD,CAAf;AAb6B;AAAA;;AAAA;AAAA;AAAA;AAoB7BP,kBAAAA,eAAe,CAAC;AACdb,oBAAAA,OAAO,EAAE,KADK;AAEdK,oBAAAA,KAAK,aAFS;AAGdrB,oBAAAA,OAAO,EAAE,YAAIA;AAHC,mBAAD,CAAf;;AApB6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,SAvIpB;;AAkKX;;;;;;;;;AASAsC,MAAAA,qBAAqB;AAAA;AAAA;AAAA,gCAAE,kBAAOC,YAAP,EAAqBjC,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AACbuB,kBAAAA,eADa,GACO,MAAK/B,KADZ,CACb+B,eADa;AAEfE,kBAAAA,iBAFe,GAEKzB,aAAa,CAACd,WAAd,CAA0BC,IAF/B;AAGrBoC,kBAAAA,eAAe,CAAC;AACdb,oBAAAA,OAAO,EAAE,IADK;AAEdhB,oBAAAA,OAAO,EAAEM,aAAa,CAACkC,0BAAd,KACLvC,cAAKC,CAAL,CAAO,sCAAP,CADK,GAELD,cAAKC,CAAL,CAAO,sBAAP;AAJU,mBAAD,CAAf;AAHqB;AAAA;AAAA,yBAUCI,aAAa,CAAC4B,KAAd,CAAoBK,YAApB,CAVD;;AAAA;AAUbtB,kBAAAA,KAVa;AAWnBd,kBAAAA,MAAM,CAACC,YAAP,CAAoBiC,OAApB,CAA4B,qBAA5B,EAAmDN,iBAAnD;AACA5B,kBAAAA,MAAM,CAACC,YAAP,CAAoBiC,OAApB,CAA4B,gBAA5B,EAA8CE,YAA9C;AACAV,kBAAAA,eAAe,CAAC;AACdV,oBAAAA,UAAU,EAAEF,KAAK,CAACA,KAAK,CAACvB,MAAN,GAAe,CAAhB,CADH;AAEdwB,oBAAAA,mBAAmB,EAAEZ,aAFP;AAGdW,oBAAAA,KAAK,EAALA,KAHc;AAIdjB,oBAAAA,OAAO,EAAEC,cAAKC,CAAL,CAAO,qBAAP,EAA8B;AAAEkC,sBAAAA,WAAW,EAAEG;AAAf,qBAA9B;AAJK,mBAAD,CAAf;AAbmB;AAAA;;AAAA;AAAA;AAAA;AAoBnBV,kBAAAA,eAAe,CAAC;AACdR,oBAAAA,KAAK,cADS;AAEdrB,oBAAAA,OAAO,EAAE,aAAIA,OAFC;AAGdgB,oBAAAA,OAAO,EAAE;AAHK,mBAAD,CAAf;;AApBmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA3KV,KAAb;AALiB;AA4MlB;;;;wCAEmB;AAAA,wBACkF,KAAKlB,KADvF;AAAA,UACVc,MADU,eACVA,MADU;AAAA,UACFE,OADE,eACFA,OADE;AAAA,UACOD,cADP,eACOA,cADP;AAAA,UACuBhB,+BADvB,eACuBA,+BADvB;AAAA,UACwDyC,qBADxD,eACwDA,qBADxD;AAElB,UAAMnD,IAAI,GAAGgB,MAAM,CAACC,YAAP,CAAoBqC,OAApB,CAA4B,qBAA5B,CAAb;AACA,UAAML,WAAW,GAAGjC,MAAM,CAACC,YAAP,CAAoBqC,OAApB,CAA4B,gBAA5B,CAApB;AACA,UAAMC,GAAG,GAAG,IAAIC,kCAAJ,CAAQ/B,MAAR,EAAgBE,OAAhB,EAAyBD,cAAzB,CAAZ;;AACA,UAAI;AAAA,oCACkC6B,GAAG,CAACE,iBAAJ,EADlC;AAAA,YACMxD,uBADN,yBACMA,uBADN;;AAEF,YAAID,IAAJ,EAAU;AACR,cAAMmB,aAAa,GAAG,KAAKuC,wBAAL,CAA8B1D,IAA9B,EAAoCC,uBAApC,CAAtB;;AACA,cAAI,CAACkB,aAAL,EAAoB;AAClB,kBAAM,IAAIwC,KAAJ,CAAU,kCAAV,CAAN;AACD;;AACD,cAAMC,cAAc,GAAGC,WAAW,CAAC,YAAM;AACvC,gBAAI,CAAC1C,aAAa,CAAC2C,SAAd,EAAL,EAAgC;AAC9BC,cAAAA,aAAa,CAACH,cAAD,CAAb,CAD8B,CAE9B;;AACA,kBAAIX,WAAJ,EAAiB;AACfE,gBAAAA,qBAAqB,CAACF,WAAD,EAAc9B,aAAd,CAArB;AACD,eAFD,MAEO;AACLT,gBAAAA,+BAA+B,CAACS,aAAD,CAA/B;AACD;AACF;AACF,WAViC,EAU/B,GAV+B,CAAlC;AAWD;AACF,OAnBD,CAmBE,OAAOG,CAAP,EAAU;AACV,aAAKd,UAAL;;AACA,YAAMwD,GAAG,GAAGlD,cAAKC,CAAL,CAAO,uBAAP,CAAZ;;AACA,YAAMkD,MAAM,GAAGjE,IAAI,IAAI,iCAAvB;AACA,YAAMkE,OAAO,GAAGC,4CAAaC,KAA7B;AACA7C,QAAAA,OAAO,CAACC,IAAR,CAAa,IAAI6C,uCAAJ,CAAaL,GAAb,EAAkBE,OAAlB,EAA2B5C,CAA3B,EAA8B2C,MAA9B,CAAb;AACD,OAzBD,SAyBU;AAAA,qCACoDV,GAAG,CAACE,iBAAJ,EADpD;AAAA,YACAxD,wBADA,0BACAA,uBADA;AAAA,YACyBQ,sBADzB,0BACyBA,sBADzB;;AAER,aAAK6D,mBAAL,CAAyBrE,wBAAzB,EAAkDQ,sBAAlD;AACD;AACF;;;yCAEoB;AAAA,yBACoD,KAAKE,KADzD;AAAA,UACXkB,OADW,gBACXA,OADW;AAAA,UACFhB,OADE,gBACFA,OADE;AAAA,UACOZ,uBADP,gBACOA,uBADP;AAAA,UACgCyC,eADhC,gBACgCA,eADhC;;AAEnB,UAAIb,OAAO,IAAIhB,OAAO,KAAKC,cAAKC,CAAL,CAAO,uBAAP,CAAvB,IAA0Dd,uBAAuB,CAACM,MAAtF,EAA8F;AAC5FmC,QAAAA,eAAe,CAAC;AAAE7B,UAAAA,OAAO,EAAEC,cAAKC,CAAL,CAAO,sBAAP,CAAX;AAA2Cc,UAAAA,OAAO,EAAE;AAApD,SAAD,CAAf;AACD;AACF;AAED;;;;;;;;;;6BAyDS;AACP,UAAMD,KAAK,GAAG,KAAKjB,KAAL,CAAWiB,KAAX,IAAoB;AAAK,QAAA,KAAK,EAAE2C;AAAZ,SAAyB,6BAAC,cAAD,OAAzB,CAAlC;;AACA,aACE,6BAAC,sBAAD,CAAY,QAAZ;AAAqB,QAAA,KAAK,EAAE,KAAK5D;AAAjC,SACE,4CAAQ6D,cAAR,CADF,EAEI5C,KAFJ,EAGI,KAAK7B,KAAL,CAAW0E,QAHf,CADF;AAOD;;;;EA5T8BC,gB;AA+TjC;;;;;;;;;;;;AASA5E,WAAW,CAAC6E,SAAZ,GAAwB;AAEtBlD,EAAAA,MAAM,EAAEmD,mBAAUC,OAAV,CAAkBD,mBAAUE,MAA5B,EAAoCC,UAFtB;AAGtBrD,EAAAA,cAAc,EAAEkD,mBAAUC,OAAV,CAAkBD,mBAAUE,MAA5B,EAAoCC,UAH9B;AAItBN,EAAAA,QAAQ,EAAEG,mBAAUI,SAAV,CAAoB,CAC5BJ,mBAAUC,OAAV,CAAkBD,mBAAUK,IAA5B,CAD4B,EAE5BL,mBAAUK,IAFkB,CAApB,EAGPF,UAPmB;AAQtBpD,EAAAA,OAAO,EAAEiD,mBAAUM,MAAV,CAAiBH,UARJ;AAStBnD,EAAAA,KAAK,EAAEgD,mBAAUO;AATK,CAAxB;AAYArF,WAAW,CAACsF,YAAZ,GAA2B;AACzBxD,EAAAA,KAAK,EAAE;AADkB,CAA3B","sourcesContent":["/* eslint-disable react/no-unused-state */\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport i18n from '../../i18n'\nimport '../../types'\nimport { UAL, UALError, UALErrorType } from '@blockone/universal-authenticator-library'\n\nimport { UALContext } from './UALContext'\nimport { DEFAULT_STATUS } from '../../constants/provider'\nimport { UALBox } from '../modal/UALBox'\n\nimport { modalStyles } from '../../styles/provider'\nimport { baseFont } from '../../styles/base'\n\n/**\n * Wrapper component that provides a child app with access to UAL functionality\n */\nexport class UALProvider extends Component {\n  constructor(props) {\n    super(props)\n    /**\n     * @namespace UAL\n     */\n    this.state = {\n      /**\n       * @memberof UAL\n       * @desc chain list from props\n       * @type {Chain[]} chains \n       */\n      chains: props.chains,\n      /**\n       * @memberof UAL\n       * @desc authenticator instances from props\n       * @type {Authenticator[]} authenticators\n       */\n      authenticators: props.authenticators,\n      /**\n       * @memberof UAL\n       * @desc available authenticator list\n       * @type {Authenticator[]} availableAuthenticators\n       */\n      availableAuthenticators: [],\n      /**\n       * @memberof UAL\n       * @desc name of app\n       * @type {string} appName\n       */\n      appName: props.appName,\n      /**\n       * @memberof UAL\n       * @desc whether or not show modal, initialized via props\n       * @type {boolean} modal\n       */\n      modal: props.modal,\n      /**\n       * @memberof UAL\n       * @desc loading state of UAL\n       * @type {boolean} loading\n       */\n      loading: false,\n      /**\n       * @memberof UAL\n       * @desc list of authenticated users\n       * @type {User[]} users\n       */\n      users: [],\n      /**\n       * @memberof UAL\n       * @desc authenticator currently used\n       * @type {Authenticator} activeAuthenticator \n       */\n      activeAuthenticator: null,\n      /**\n       * @memberof UAL\n       * @desc logged in user\n       * @type {User} activeUser\n       */\n      activeUser: null,\n      /**\n       * @memberof UAL\n       * @desc whether or not activeAuthenticator should auto login\n       * @type {boolean} isAutoLogin\n       */\n      isAutoLogin: false,\n      /**\n       * @memberof UAL\n       * @desc captured error if any\n       * @type {UALError|null} error\n       */\n      error: null,\n      /**\n       * @memberof UAL\n       * @desc message, if any, accompanying current UAL state\n       * @type {string} message\n       */\n      message: '',\n      /**\n       * @memberof UAL\n       * @function\n       * @name hideModal\n       * @desc hides the modal\n       * @return {Void}\n       */\n      hideModal: () => this.setState({ modal: false, loading: true, message: i18n.t('loadingAuthenticators') }),\n      /**\n       * @memberof UAL\n       * @function\n       * @name showModal\n       * @desc shows the modal\n       * @return {Void}\n       */\n      showModal: () => {\n        const { availableAuthenticators } = this.state\n        availableAuthenticators.forEach(auth => auth.reset())\n        this.setState({ modal: true })\n      },\n      /**\n       * @memberof UAL\n       * @function\n       * @name logout\n       * @desc logs user out of authenticator and resets UAL state\n       * @return {Void}\n       */\n      logout: () => {\n        const { activeAuthenticator } = this.state\n        this.setState(DEFAULT_STATUS, () => activeAuthenticator && this.fullLogout(activeAuthenticator))\n      },\n      /**\n       * @memberof UAL\n       * @function\n       * @name restart\n       * @desc resets all available authenticators and resets UAL state\n       * @return {Void}\n       */\n      restart: () => {\n        this.setState({ DEFAULT_STATUS }, () => {\n          const { availableAuthenticators } = this.state\n          availableAuthenticators.forEach(auth => auth.reset())\n          this.setState(availableAuthenticators)\n        })\n      },\n      /**\n       * @memberof UAL\n       * @function\n       * @name broadcastStatus\n       * @desc dispatches a provider state update\n       * @return {Void}\n       */\n      broadcastStatus: (status = DEFAULT_STATUS) => this.setState(status),\n      /**\n       * @memberof UAL\n       * @function\n       * @name authenticateWithoutAccountInput\n       * @desc attempts authentication with an authenticator not requiring account input\n       * @return {Void}\n       * @param {Authenticator} authenticator\n       * @param {boolean} [false] isAutoLogin\n       */\n      authenticateWithoutAccountInput: async (authenticator, isAutoLogin = false) => {\n        const { broadcastStatus } = this.state\n        broadcastStatus({\n          loading: true,\n          message: i18n.t('continueWithAuthenticator', { authenticatorName: authenticator.getStyle().text }),\n          activeAuthenticator: authenticator,\n        })\n        try {\n          const users = await authenticator.login()\n          const accountName = await users[0].getAccountName()\n          if (!isAutoLogin) {\n            window.localStorage.setItem('UALLoggedInAuthType', authenticator.constructor.name)\n          }\n          broadcastStatus({\n            activeUser: users[users.length - 1],\n            users,\n            isAutoLogin,\n            message: i18n.t('currentlyLoggedInAs', { accountName }),\n          })\n        } catch (err) {\n          broadcastStatus({\n            loading: false,\n            error: err,\n            message: err.message,\n          })\n        }\n      },\n      /**\n       * @memberof UAL\n       * @function\n       * @name submitAccountForLogin\n       * @desc attempts authentication\n       * @return {Void}\n       * @param {string} accountInput\n       * @param {Authenticator} authenticator\n       */\n      submitAccountForLogin: async (accountInput, authenticator) => {\n        const { broadcastStatus } = this.state\n        const authenticatorName = authenticator.constructor.name\n        broadcastStatus({\n          loading: true,\n          message: authenticator.requiresGetKeyConfirmation()\n            ? i18n.t('waitWhileFindAccountWithConfirmation')\n            : i18n.t('waitWhileFindAccount'),\n        })\n        try {\n          const users = await authenticator.login(accountInput)\n          window.localStorage.setItem('UALLoggedInAuthType', authenticatorName)\n          window.localStorage.setItem('UALAccountName', accountInput)\n          broadcastStatus({\n            activeUser: users[users.length - 1],\n            activeAuthenticator: authenticator,\n            users,\n            message: i18n.t('currentlyLoggedInAs', { accountName: accountInput }),\n          })\n        } catch (err) {\n          broadcastStatus({\n            error: err,\n            message: err.message,\n            loading: false,\n          })\n        }\n      },\n    }\n  }\n\n  componentDidMount() {\n    const { chains, appName, authenticators, authenticateWithoutAccountInput, submitAccountForLogin } = this.state\n    const type = window.localStorage.getItem('UALLoggedInAuthType')\n    const accountName = window.localStorage.getItem('UALAccountName')\n    const ual = new UAL(chains, appName, authenticators)\n    try {\n      const { availableAuthenticators } = ual.getAuthenticators()\n      if (type) {\n        const authenticator = this.getAuthenticatorInstance(type, availableAuthenticators)\n        if (!authenticator) {\n          throw new Error('authenticator instance not found')\n        }\n        const availableCheck = setInterval(() => {\n          if (!authenticator.isLoading()) {\n            clearInterval(availableCheck)\n            // Only Ledger requires an account name\n            if (accountName) {\n              submitAccountForLogin(accountName, authenticator)\n            } else {\n              authenticateWithoutAccountInput(authenticator)\n            }\n          }\n        }, 250)\n      }\n    } catch (e) {\n      this.clearCache()\n      const msg = i18n.t('sessionEndedNeedLogin')\n      const source = type || 'Universal Authenticator Library'\n      const errType = UALErrorType.Login\n      console.warn(new UALError(msg, errType, e, source))\n    } finally {\n      const { availableAuthenticators, autoLoginAuthenticator } = ual.getAuthenticators()\n      this.fetchAuthenticators(availableAuthenticators, autoLoginAuthenticator)\n    }\n  }\n\n  componentDidUpdate() {\n    const { loading, message, availableAuthenticators, broadcastStatus } = this.state\n    if (loading && message === i18n.t('loadingAuthenticators') && availableAuthenticators.length) {\n      broadcastStatus({ message: i18n.t('authenticatorsLoaded'), loading: false })\n    }\n  }\n\n  /**\n   * Verifies a logged in user's authenticator is still app supported\n   * @method\n   * @param {string} type - authenticator type of sessioned user\n   * @param {Object[]} availableAuthenticators - list of available app supported authenticators\n   * @return {number|boolean}\n   */\n  getAuthenticatorInstance = (type, availableAuthenticators) => {\n    const loggedIn = availableAuthenticators.filter(auth => auth.constructor.name === type)\n    if (!loggedIn.length) {\n      this.clearCache()\n    }\n    return loggedIn.length ? loggedIn[0] : false\n  }\n\n  /**\n   * Renders available authenticators or starts auto-login process if applicable\n   * @method\n   * @param {Authenticator[]} availableAuthenticators - list of available app supported authenticators\n   * @param {Authenticator} autoLoginAuthenticator - auto-login authenticator\n   * @return {Void}\n   */\n  fetchAuthenticators = (availableAuthenticators, autoLoginAuthenticator) => {\n    const { authenticateWithoutAccountInput } = this.state\n    if (autoLoginAuthenticator) {\n      this.setState({ availableAuthenticators: [autoLoginAuthenticator] }, () => {\n        authenticateWithoutAccountInput(autoLoginAuthenticator, true)\n      })\n    } else {\n      this.setState({ availableAuthenticators }, () => {\n        this.setState({ message: i18n.t('authenticatorsLoaded') })\n      })\n    }\n  }\n\n  /**\n   * Clears locally stored user session\n   * @method\n   * @return {Void}\n   */\n  clearCache = () => {\n    window.localStorage.removeItem('UALLoggedInAuthType')\n    window.localStorage.removeItem('UALAccountName')\n  }\n\n  /**\n   * Clears localStorage and logs out user\n   * @method\n   * @param {Authenticator} authenticator - used authenticator\n   * @return {Void}\n   */\n  fullLogout = (authenticator) => {\n    this.clearCache()\n    authenticator.logout()\n      .catch(e => console.warn(e))\n  }\n\n  render() {\n    const modal = this.state.modal && <div style={modalStyles}><UALBox /></div>\n    return (\n      <UALContext.Provider value={this.state}>\n        <style>{baseFont}</style>\n        { modal }\n        { this.props.children }\n      </UALContext.Provider>\n    )\n  }\n}\n\n/**\n * @memberof UALProvider\n * @name props\n * @prop {Chain[]} chains - list of chains the app supports\n * @prop {Authenticator[]} authenticators - list of authenticators the app supports\n * @prop {Node[]|Node} children - child app(s)\n * @prop {string} appName - name of app\n * @prop {boolean} modal - whether or not to show modal\n */\nUALProvider.propTypes = {\n\n  chains: PropTypes.arrayOf(PropTypes.object).isRequired,\n  authenticators: PropTypes.arrayOf(PropTypes.object).isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n  appName: PropTypes.string.isRequired,\n  modal: PropTypes.bool,\n}\n\nUALProvider.defaultProps = {\n  modal: false,\n}\n"],"file":"UALProvider.js"}