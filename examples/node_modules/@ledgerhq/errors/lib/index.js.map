{"version":3,"sources":["../src/index.js"],"names":["TransportError","getAltStatusMessage","TransportStatusError","AccountNameRequiredError","BluetoothRequired","BtcUnmatchedApp","CantOpenDevice","DeviceAppVerifyNotSupported","DeviceGenuineSocketEarlyClose","DeviceNotGenuineError","DeviceOnDashboardExpected","DeviceNameInvalid","DeviceSocketFail","DeviceSocketNoBulkStatus","DisconnectedDevice","DisconnectedDeviceDuringOperation","EnpointConfigError","FeeEstimationFailed","HardResetFail","InvalidAddress","InvalidAddressBecauseDestinationIsAlsoSource","LatestMCUInstalledError","UnknownMCU","LedgerAPIError","LedgerAPIErrorWithMessage","LedgerAPINotAvailable","ManagerAppAlreadyInstalledError","ManagerAppRelyOnBTCError","ManagerDeviceLockedError","ManagerNotEnoughSpaceError","ManagerUninstallBTCDep","NetworkDown","NoAddressesFound","NotEnoughBalance","NotEnoughBalanceBecauseDestinationNotCreated","PasswordsDontMatchError","PasswordIncorrectError","TimeoutTagged","UnexpectedBootloader","UpdateYourApp","UserRefusedAddress","UserRefusedFirmwareUpdate","UserRefusedOnDevice","WebsocketConnectionError","WebsocketConnectionFailed","WrongDeviceForAccount","ETHAddressNonEIP","CantScanQRCode","FeeNotLoaded","FeeRequired","SyncError","PairingFailed","GenuineCheckFailed","NoDBPathGiven","DBWrongPassword","DBNotReset","message","id","name","stack","Error","prototype","StatusCodes","PIN_REMAINING_ATTEMPTS","INCORRECT_LENGTH","COMMAND_INCOMPATIBLE_FILE_STRUCTURE","SECURITY_STATUS_NOT_SATISFIED","CONDITIONS_OF_USE_NOT_SATISFIED","INCORRECT_DATA","NOT_ENOUGH_MEMORY_SPACE","REFERENCED_DATA_NOT_FOUND","FILE_ALREADY_EXISTS","INCORRECT_P1_P2","INS_NOT_SUPPORTED","CLA_NOT_SUPPORTED","TECHNICAL_PROBLEM","OK","MEMORY_PROBLEM","NO_EF_SELECTED","INVALID_OFFSET","FILE_NOT_FOUND","INCONSISTENT_FILE","ALGORITHM_NOT_SUPPORTED","INVALID_KCV","CODE_NOT_INITIALIZED","ACCESS_CONDITION_NOT_FULFILLED","CONTRADICTION_SECRET_CODE_STATUS","CONTRADICTION_INVALIDATION","CODE_BLOCKED","MAX_VALUE_REACHED","GP_AUTH_FAILED","LICENSING","HALTED","code","statusCode","statusText","Object","keys","find","k","smsg","statusCodeStr","toString"],"mappings":";;;;;;QAkHgBA,c,GAAAA,c;QA0CAC,mB,GAAAA,mB;QAuBAC,oB,GAAAA,oB;;AAjLhB;;AAEO,IAAMC,8DAA2B,qCACtC,qBADsC,CAAjC;;AAGA,IAAMC,gDAAoB,qCAAuB,mBAAvB,CAA1B;AACA,IAAMC,4CAAkB,qCAAuB,iBAAvB,CAAxB;AACA,IAAMC,0CAAiB,qCAAuB,gBAAvB,CAAvB;AACA,IAAMC,oEAA8B,qCACzC,6BADyC,CAApC;AAGA,IAAMC,wEAAgC,qCAC3C,+BAD2C,CAAtC;AAGA,IAAMC,wDAAwB,qCAAuB,kBAAvB,CAA9B;AACA,IAAMC,gEAA4B,qCACvC,2BADuC,CAAlC;AAGA,IAAMC,gDAAoB,qCAAuB,mBAAvB,CAA1B;AACA,IAAMC,8CAAmB,qCAAuB,kBAAvB,CAAzB;AACA,IAAMC,8DAA2B,qCACtC,0BADsC,CAAjC;AAGA,IAAMC,kDAAqB,qCAAuB,oBAAvB,CAA3B;AACA,IAAMC,gFAAoC,qCAC/C,mCAD+C,CAA1C;AAGA,IAAMC,kDAAqB,qCAAuB,eAAvB,CAA3B;AACA,IAAMC,oDAAsB,qCACjC,qBADiC,CAA5B;AAGA,IAAMC,wCAAgB,qCAAuB,eAAvB,CAAtB;AACA,IAAMC,0CAAiB,qCAAuB,gBAAvB,CAAvB;AACA,IAAMC,sGAA+C,qCAC1D,8CAD0D,CAArD;AAGA,IAAMC,4DAA0B,qCACrC,yBADqC,CAAhC;AAGA,IAAMC,kCAAa,qCAAuB,YAAvB,CAAnB;AACA,IAAMC,0CAAiB,qCAAuB,gBAAvB,CAAvB;AACA,IAAMC,gEAA4B,qCACvC,2BADuC,CAAlC;AAGA,IAAMC,wDAAwB,qCACnC,uBADmC,CAA9B;AAGA,IAAMC,4EAAkC,qCAC7C,4BAD6C,CAAxC;AAGA,IAAMC,8DAA2B,qCACtC,qBADsC,CAAjC;AAGA,IAAMC,8DAA2B,qCACtC,qBADsC,CAAjC;AAGA,IAAMC,kEAA6B,qCACxC,uBADwC,CAAnC;AAGA,IAAMC,0DAAyB,qCACpC,wBADoC,CAA/B;AAGA,IAAMC,oCAAc,qCAAuB,aAAvB,CAApB;AACA,IAAMC,8CAAmB,qCAAuB,kBAAvB,CAAzB;AACA,IAAMC,8CAAmB,qCAAuB,kBAAvB,CAAzB;AACA,IAAMC,sGAA+C,qCAC1D,8CAD0D,CAArD;AAGA,IAAMC,4DAA0B,qCACrC,oBADqC,CAAhC;AAGA,IAAMC,0DAAyB,qCACpC,mBADoC,CAA/B;AAGA,IAAMC,wCAAgB,qCAAuB,eAAvB,CAAtB;AACA,IAAMC,sDAAuB,qCAClC,sBADkC,CAA7B;AAGA,IAAMC,wCAAgB,qCAAuB,eAAvB,CAAtB;AACA,IAAMC,kDAAqB,qCAAuB,oBAAvB,CAA3B;AACA,IAAMC,gEAA4B,qCACvC,2BADuC,CAAlC;AAGA,IAAMC,oDAAsB,qCACjC,qBADiC,CAA5B,C,CAEJ;AACI,IAAMC,8DAA2B,qCACtC,0BADsC,CAAjC;AAGA,IAAMC,gEAA4B,qCACvC,2BADuC,CAAlC;AAGA,IAAMC,wDAAwB,qCACnC,uBADmC,CAA9B;AAGA,IAAMC,8CAAmB,qCAAuB,kBAAvB,CAAzB;AACA,IAAMC,0CAAiB,qCAAuB,gBAAvB,CAAvB;AACA,IAAMC,sCAAe,qCAAuB,cAAvB,CAArB;AACA,IAAMC,oCAAc,qCAAuB,aAAvB,CAApB;AACA,IAAMC,gCAAY,qCAAuB,WAAvB,CAAlB;AACA,IAAMC,wCAAgB,qCAAuB,eAAvB,CAAtB;AACA,IAAMC,kDAAqB,qCAAuB,oBAAvB,CAA3B;;AAEP;AACO,IAAMC,wCAAgB,qCAAuB,eAAvB,CAAtB;AACA,IAAMC,4CAAkB,qCAAuB,iBAAvB,CAAxB;AACA,IAAMC,kCAAa,qCAAuB,YAAvB,CAAnB;;AAEP;;;;AAIO,SAASvD,cAAT,CAAwBwD,OAAxB,EAAyCC,EAAzC,EAAqD;AAC1D,OAAKC,IAAL,GAAY,gBAAZ;AACA,OAAKF,OAAL,GAAeA,OAAf;AACA,OAAKG,KAAL,GAAa,IAAIC,KAAJ,GAAYD,KAAzB;AACA,OAAKF,EAAL,GAAUA,EAAV;AACD;AACD;AACAzD,eAAe6D,SAAf,GAA2B,IAAID,KAAJ,EAA3B;;AAEO,IAAME,oCAAc;AACzBC,0BAAwB,MADC;AAEzBC,oBAAkB,MAFO;AAGzBC,uCAAqC,MAHZ;AAIzBC,iCAA+B,MAJN;AAKzBC,mCAAiC,MALR;AAMzBC,kBAAgB,MANS;AAOzBC,2BAAyB,MAPA;AAQzBC,6BAA2B,MARF;AASzBC,uBAAqB,MATI;AAUzBC,mBAAiB,MAVQ;AAWzBC,qBAAmB,MAXM;AAYzBC,qBAAmB,MAZM;AAazBC,qBAAmB,MAbM;AAczBC,MAAI,MAdqB;AAezBC,kBAAgB,MAfS;AAgBzBC,kBAAgB,MAhBS;AAiBzBC,kBAAgB,MAjBS;AAkBzBC,kBAAgB,MAlBS;AAmBzBC,qBAAmB,MAnBM;AAoBzBC,2BAAyB,MApBA;AAqBzBC,eAAa,MArBY;AAsBzBC,wBAAsB,MAtBG;AAuBzBC,kCAAgC,MAvBP;AAwBzBC,oCAAkC,MAxBT;AAyBzBC,8BAA4B,MAzBH;AA0BzBC,gBAAc,MA1BW;AA2BzBC,qBAAmB,MA3BM;AA4BzBC,kBAAgB,MA5BS;AA6BzBC,aAAW,MA7Bc;AA8BzBC,UAAQ;AA9BiB,CAApB;;AAiCA,SAAS3F,mBAAT,CAA6B4F,IAA7B,EAAoD;AACzD,UAAQA,IAAR;AACE;AACA,SAAK,MAAL;AACE,aAAO,kBAAP;AACF,SAAK,MAAL;AACE,aAAO,sEAAP;AACF,SAAK,MAAL;AACE,aAAO,sDAAP;AACF,SAAK,MAAL;AACE,aAAO,uBAAP;AACF,SAAK,MAAL;AACE,aAAO,4BAAP;AAXJ;AAaA,MAAI,UAAUA,IAAV,IAAkBA,QAAQ,MAA9B,EAAsC;AACpC,WAAO,+BAAP;AACD;AACF;;AAED;;;;AAIO,SAAS3F,oBAAT,CAA8B4F,UAA9B,EAAkD;AACvD,OAAKpC,IAAL,GAAY,sBAAZ;AACA,MAAMqC,aACJC,OAAOC,IAAP,CAAYnC,WAAZ,EAAyBoC,IAAzB,CAA8B;AAAA,WAAKpC,YAAYqC,CAAZ,MAAmBL,UAAxB;AAAA,GAA9B,KACA,eAFF;AAGA,MAAMM,OAAOnG,oBAAoB6F,UAApB,KAAmCC,UAAhD;AACA,MAAMM,gBAAgBP,WAAWQ,QAAX,CAAoB,EAApB,CAAtB;AACA,OAAK9C,OAAL,uBAAiC4C,IAAjC,YAA4CC,aAA5C;AACA,OAAK1C,KAAL,GAAa,IAAIC,KAAJ,GAAYD,KAAzB;AACA,OAAKmC,UAAL,GAAkBA,UAAlB;AACA,OAAKC,UAAL,GAAkBA,UAAlB;AACD;AACD;AACA7F,qBAAqB2D,SAArB,GAAiC,IAAID,KAAJ,EAAjC","file":"index.js","sourcesContent":["// @flow\n\nimport { createCustomErrorClass } from \"./helpers\";\n\nexport const AccountNameRequiredError = createCustomErrorClass(\n  \"AccountNameRequired\"\n);\nexport const BluetoothRequired = createCustomErrorClass(\"BluetoothRequired\");\nexport const BtcUnmatchedApp = createCustomErrorClass(\"BtcUnmatchedApp\");\nexport const CantOpenDevice = createCustomErrorClass(\"CantOpenDevice\");\nexport const DeviceAppVerifyNotSupported = createCustomErrorClass(\n  \"DeviceAppVerifyNotSupported\"\n);\nexport const DeviceGenuineSocketEarlyClose = createCustomErrorClass(\n  \"DeviceGenuineSocketEarlyClose\"\n);\nexport const DeviceNotGenuineError = createCustomErrorClass(\"DeviceNotGenuine\");\nexport const DeviceOnDashboardExpected = createCustomErrorClass(\n  \"DeviceOnDashboardExpected\"\n);\nexport const DeviceNameInvalid = createCustomErrorClass(\"DeviceNameInvalid\");\nexport const DeviceSocketFail = createCustomErrorClass(\"DeviceSocketFail\");\nexport const DeviceSocketNoBulkStatus = createCustomErrorClass(\n  \"DeviceSocketNoBulkStatus\"\n);\nexport const DisconnectedDevice = createCustomErrorClass(\"DisconnectedDevice\");\nexport const DisconnectedDeviceDuringOperation = createCustomErrorClass(\n  \"DisconnectedDeviceDuringOperation\"\n);\nexport const EnpointConfigError = createCustomErrorClass(\"EnpointConfig\");\nexport const FeeEstimationFailed = createCustomErrorClass(\n  \"FeeEstimationFailed\"\n);\nexport const HardResetFail = createCustomErrorClass(\"HardResetFail\");\nexport const InvalidAddress = createCustomErrorClass(\"InvalidAddress\");\nexport const InvalidAddressBecauseDestinationIsAlsoSource = createCustomErrorClass(\n  \"InvalidAddressBecauseDestinationIsAlsoSource\"\n);\nexport const LatestMCUInstalledError = createCustomErrorClass(\n  \"LatestMCUInstalledError\"\n);\nexport const UnknownMCU = createCustomErrorClass(\"UnknownMCU\");\nexport const LedgerAPIError = createCustomErrorClass(\"LedgerAPIError\");\nexport const LedgerAPIErrorWithMessage = createCustomErrorClass(\n  \"LedgerAPIErrorWithMessage\"\n);\nexport const LedgerAPINotAvailable = createCustomErrorClass(\n  \"LedgerAPINotAvailable\"\n);\nexport const ManagerAppAlreadyInstalledError = createCustomErrorClass(\n  \"ManagerAppAlreadyInstalled\"\n);\nexport const ManagerAppRelyOnBTCError = createCustomErrorClass(\n  \"ManagerAppRelyOnBTC\"\n);\nexport const ManagerDeviceLockedError = createCustomErrorClass(\n  \"ManagerDeviceLocked\"\n);\nexport const ManagerNotEnoughSpaceError = createCustomErrorClass(\n  \"ManagerNotEnoughSpace\"\n);\nexport const ManagerUninstallBTCDep = createCustomErrorClass(\n  \"ManagerUninstallBTCDep\"\n);\nexport const NetworkDown = createCustomErrorClass(\"NetworkDown\");\nexport const NoAddressesFound = createCustomErrorClass(\"NoAddressesFound\");\nexport const NotEnoughBalance = createCustomErrorClass(\"NotEnoughBalance\");\nexport const NotEnoughBalanceBecauseDestinationNotCreated = createCustomErrorClass(\n  \"NotEnoughBalanceBecauseDestinationNotCreated\"\n);\nexport const PasswordsDontMatchError = createCustomErrorClass(\n  \"PasswordsDontMatch\"\n);\nexport const PasswordIncorrectError = createCustomErrorClass(\n  \"PasswordIncorrect\"\n);\nexport const TimeoutTagged = createCustomErrorClass(\"TimeoutTagged\");\nexport const UnexpectedBootloader = createCustomErrorClass(\n  \"UnexpectedBootloader\"\n);\nexport const UpdateYourApp = createCustomErrorClass(\"UpdateYourApp\");\nexport const UserRefusedAddress = createCustomErrorClass(\"UserRefusedAddress\");\nexport const UserRefusedFirmwareUpdate = createCustomErrorClass(\n  \"UserRefusedFirmwareUpdate\"\n);\nexport const UserRefusedOnDevice = createCustomErrorClass(\n  \"UserRefusedOnDevice\"\n); // TODO rename because it's just for transaction refusal\nexport const WebsocketConnectionError = createCustomErrorClass(\n  \"WebsocketConnectionError\"\n);\nexport const WebsocketConnectionFailed = createCustomErrorClass(\n  \"WebsocketConnectionFailed\"\n);\nexport const WrongDeviceForAccount = createCustomErrorClass(\n  \"WrongDeviceForAccount\"\n);\nexport const ETHAddressNonEIP = createCustomErrorClass(\"ETHAddressNonEIP\");\nexport const CantScanQRCode = createCustomErrorClass(\"CantScanQRCode\");\nexport const FeeNotLoaded = createCustomErrorClass(\"FeeNotLoaded\");\nexport const FeeRequired = createCustomErrorClass(\"FeeRequired\");\nexport const SyncError = createCustomErrorClass(\"SyncError\");\nexport const PairingFailed = createCustomErrorClass(\"PairingFailed\");\nexport const GenuineCheckFailed = createCustomErrorClass(\"GenuineCheckFailed\");\n\n// db stuff, no need to translate\nexport const NoDBPathGiven = createCustomErrorClass(\"NoDBPathGiven\");\nexport const DBWrongPassword = createCustomErrorClass(\"DBWrongPassword\");\nexport const DBNotReset = createCustomErrorClass(\"DBNotReset\");\n\n/**\n * TransportError is used for any generic transport errors.\n * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.\n */\nexport function TransportError(message: string, id: string) {\n  this.name = \"TransportError\";\n  this.message = message;\n  this.stack = new Error().stack;\n  this.id = id;\n}\n//$FlowFixMe\nTransportError.prototype = new Error();\n\nexport const StatusCodes = {\n  PIN_REMAINING_ATTEMPTS: 0x63c0,\n  INCORRECT_LENGTH: 0x6700,\n  COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 0x6981,\n  SECURITY_STATUS_NOT_SATISFIED: 0x6982,\n  CONDITIONS_OF_USE_NOT_SATISFIED: 0x6985,\n  INCORRECT_DATA: 0x6a80,\n  NOT_ENOUGH_MEMORY_SPACE: 0x6a84,\n  REFERENCED_DATA_NOT_FOUND: 0x6a88,\n  FILE_ALREADY_EXISTS: 0x6a89,\n  INCORRECT_P1_P2: 0x6b00,\n  INS_NOT_SUPPORTED: 0x6d00,\n  CLA_NOT_SUPPORTED: 0x6e00,\n  TECHNICAL_PROBLEM: 0x6f00,\n  OK: 0x9000,\n  MEMORY_PROBLEM: 0x9240,\n  NO_EF_SELECTED: 0x9400,\n  INVALID_OFFSET: 0x9402,\n  FILE_NOT_FOUND: 0x9404,\n  INCONSISTENT_FILE: 0x9408,\n  ALGORITHM_NOT_SUPPORTED: 0x9484,\n  INVALID_KCV: 0x9485,\n  CODE_NOT_INITIALIZED: 0x9802,\n  ACCESS_CONDITION_NOT_FULFILLED: 0x9804,\n  CONTRADICTION_SECRET_CODE_STATUS: 0x9808,\n  CONTRADICTION_INVALIDATION: 0x9810,\n  CODE_BLOCKED: 0x9840,\n  MAX_VALUE_REACHED: 0x9850,\n  GP_AUTH_FAILED: 0x6300,\n  LICENSING: 0x6f42,\n  HALTED: 0x6faa\n};\n\nexport function getAltStatusMessage(code: number): ?string {\n  switch (code) {\n    // improve text of most common errors\n    case 0x6700:\n      return \"Incorrect length\";\n    case 0x6982:\n      return \"Security not satisfied (dongle locked or have invalid access rights)\";\n    case 0x6985:\n      return \"Condition of use not satisfied (denied by the user?)\";\n    case 0x6a80:\n      return \"Invalid data received\";\n    case 0x6b00:\n      return \"Invalid parameter received\";\n  }\n  if (0x6f00 <= code && code <= 0x6fff) {\n    return \"Internal error, please report\";\n  }\n}\n\n/**\n * Error thrown when a device returned a non success status.\n * the error.statusCode is one of the `StatusCodes` exported by this library.\n */\nexport function TransportStatusError(statusCode: number) {\n  this.name = \"TransportStatusError\";\n  const statusText =\n    Object.keys(StatusCodes).find(k => StatusCodes[k] === statusCode) ||\n    \"UNKNOWN_ERROR\";\n  const smsg = getAltStatusMessage(statusCode) || statusText;\n  const statusCodeStr = statusCode.toString(16);\n  this.message = `Ledger device: ${smsg} (0x${statusCodeStr})`;\n  this.stack = new Error().stack;\n  this.statusCode = statusCode;\n  this.statusText = statusText;\n}\n//$FlowFixMe\nTransportStatusError.prototype = new Error();\n"]}