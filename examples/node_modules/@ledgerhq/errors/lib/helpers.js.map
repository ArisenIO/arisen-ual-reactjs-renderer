{"version":3,"sources":["../src/helpers.js"],"names":["errorClasses","createCustomErrorClass","name","C","CustomError","message","fields","Object","assign","stack","Error","prototype","deserializeError","object","msg","JSON","parse","e","constructor","error","create","prop","hasOwnProperty","captureStackTrace","String","serializeError","value","destroyCircular","from","seen","to","push","keys","key","indexOf","slice"],"mappings":"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","file":"helpers.js","sourcesContent":["// @flow\n/* eslint-disable no-continue */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-prototype-builtins */\n\nconst errorClasses = {};\n\nexport const createCustomErrorClass = (name: string): Class<any> => {\n  const C = function CustomError(message?: string, fields?: Object) {\n    Object.assign(this, fields);\n    this.name = name;\n    this.message = message || name;\n    this.stack = new Error().stack;\n  };\n  // $FlowFixMe\n  C.prototype = new Error();\n\n  errorClasses[name] = C;\n  // $FlowFixMe we can't easily type a subset of Error for now...\n  return C;\n};\n\n// inspired from https://github.com/programble/errio/blob/master/index.js\nexport const deserializeError = (object: mixed): Error => {\n  if (typeof object === \"object\" && object) {\n    try {\n      // $FlowFixMe FIXME HACK\n      const msg = JSON.parse(object.message);\n      if (msg.message && msg.name) {\n        object = msg;\n      }\n    } catch (e) {\n      // nothing\n    }\n    const constructor =\n      object.name === \"Error\"\n        ? Error\n        : typeof object.name === \"string\"\n        ? errorClasses[object.name] || createCustomErrorClass(object.name)\n        : Error;\n\n    const error = Object.create(constructor.prototype);\n    for (const prop in object) {\n      if (object.hasOwnProperty(prop)) {\n        error[prop] = object[prop];\n      }\n    }\n    if (!error.stack && Error.captureStackTrace) {\n      Error.captureStackTrace(error, deserializeError);\n    }\n    return error;\n  }\n  return new Error(String(object));\n};\n\n// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\nexport const serializeError = (value: mixed) => {\n  if (!value) return value;\n  if (typeof value === \"object\") {\n    return destroyCircular(value, []);\n  }\n  if (typeof value === \"function\") {\n    return `[Function: ${value.name || \"anonymous\"}]`;\n  }\n  return value;\n};\n\n// https://www.npmjs.com/package/destroy-circular\nfunction destroyCircular(from: Object, seen) {\n  const to = {};\n  seen.push(from);\n  for (const key of Object.keys(from)) {\n    const value = from[key];\n    if (typeof value === \"function\") {\n      continue;\n    }\n    if (!value || typeof value !== \"object\") {\n      to[key] = value;\n      continue;\n    }\n    if (seen.indexOf(from[key]) === -1) {\n      to[key] = destroyCircular(from[key], seen.slice(0));\n      continue;\n    }\n    to[key] = \"[Circular]\";\n  }\n  if (typeof from.name === \"string\") {\n    to.name = from.name;\n  }\n  if (typeof from.message === \"string\") {\n    to.message = from.message;\n  }\n  if (typeof from.stack === \"string\") {\n    to.stack = from.stack;\n  }\n  return to;\n}\n"]}