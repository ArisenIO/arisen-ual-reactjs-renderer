{"version":3,"sources":["../src/index.js"],"names":["devices","blue","id","productName","usbProductId","nanoS","nanoX","bluetoothSpec","serviceUuid","notifyUuid","writeUuid","devicesList","Object","values","ledgerUSBVendorId","getDeviceModel","info","Error","identifyUSBProductId","find","d","bluetoothServices","serviceUuidToInfos","deviceModel","i","length","spec","push","getBluetoothServiceUuids","getInfosForServiceUuid","uuid","toLowerCase"],"mappings":";;;;;;;;AAEA,IAAMA,UAAyC;AAC7CC,QAAM;AACJC,QAAI,MADA;AAEJC,iBAAa,aAFT;AAGJC,kBAAc;AAHV,GADuC;AAM7CC,SAAO;AACLH,QAAI,OADC;AAELC,iBAAa,eAFR;AAGLC,kBAAc;AAHT,GANsC;AAW7CE,SAAO;AACLJ,QAAI,OADC;AAELC,iBAAa,eAFR;AAGLC,kBAAc,MAHT;AAILG,mBAAe,CACb;AACE;AACAC,mBAAa,sCAFf;AAGEC,kBAAY,sCAHd;AAIEC,iBAAW;AAJb,KADa,EAOb;AACEF,mBAAa,sCADf;AAEEC,kBAAY,sCAFd;AAGEC,iBAAW;AAHb,KAPa;AAJV;AAXsC,CAA/C;;AA+BA;AACA,IAAMC,cAA6BC,OAAOC,MAAP,CAAcb,OAAd,CAAnC;;AAEA;;;AAGO,IAAMc,gDAAoB,MAA1B;;AAEP;;;AAGO,IAAMC,0CAAiB,SAAjBA,cAAiB,CAACb,EAAD,EAA6B;AACzD,MAAMc,OAAOhB,QAAQE,EAAR,CAAb;AACA,MAAI,CAACc,IAAL,EAAW,MAAM,IAAIC,KAAJ,CAAU,aAAaf,EAAb,GAAkB,kBAA5B,CAAN;AACX,SAAOc,IAAP;AACD,CAJM;;AAMP;;;AAGO,IAAME,sDAAuB,SAAvBA,oBAAuB,CAACd,YAAD;AAAA,SAClCO,YAAYQ,IAAZ,CAAiB;AAAA,WAAKC,EAAEhB,YAAF,KAAmBA,YAAxB;AAAA,GAAjB,CADkC;AAAA,CAA7B;;AAGP,IAAMiB,oBAA8B,EAApC;AACA,IAAMC,qBAEF,EAFJ;;AAIA,KAAK,IAAIpB,GAAT,IAAeF,OAAf,EAAwB;AACtB,MAAMuB,eAAcvB,QAAQE,GAAR,CAApB;AADsB,MAEdK,cAFc,GAEIgB,YAFJ,CAEdhB,aAFc;;AAGtB,MAAIA,cAAJ,EAAmB;AACjB,SAAK,IAAIiB,IAAI,CAAb,EAAgBA,IAAIjB,eAAckB,MAAlC,EAA0CD,GAA1C,EAA+C;AAC7C,UAAME,OAAOnB,eAAciB,CAAd,CAAb;AACAH,wBAAkBM,IAAlB,CAAuBD,KAAKlB,WAA5B;AACAc,yBAAmBI,KAAKlB,WAAxB,eAAyCe,yBAAzC,IAAyDG,IAAzD;AACD;AACF;AACF;;AAED;;;AAGO,IAAME,8DAA2B,SAA3BA,wBAA2B;AAAA,SAAMP,iBAAN;AAAA,CAAjC;;AAEP;;;AAGO,IAAMQ,0DAAyB,SAAzBA,sBAAyB,CAACC,IAAD;AAAA,SACpCR,mBAAmBQ,KAAKC,WAAL,EAAnB,CADoC;AAAA,CAA/B;;AAGP;;;;;AAcA","file":"index.js","sourcesContent":["// @flow\n\nconst devices: { [id: string]: DeviceModel } = {\n  blue: {\n    id: \"blue\",\n    productName: \"Ledger Blue\",\n    usbProductId: 0x0000\n  },\n  nanoS: {\n    id: \"nanoS\",\n    productName: \"Ledger Nano S\",\n    usbProductId: 0x0001\n  },\n  nanoX: {\n    id: \"nanoX\",\n    productName: \"Ledger Nano X\",\n    usbProductId: 0x0004,\n    bluetoothSpec: [\n      {\n        // this is the legacy one (prototype version). we will eventually drop it.\n        serviceUuid: \"d973f2e0-b19e-11e2-9e96-0800200c9a66\",\n        notifyUuid: \"d973f2e1-b19e-11e2-9e96-0800200c9a66\",\n        writeUuid: \"d973f2e2-b19e-11e2-9e96-0800200c9a66\"\n      },\n      {\n        serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n        notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n        writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\"\n      }\n    ]\n  }\n};\n\n// $FlowFixMe\nconst devicesList: DeviceModel[] = Object.values(devices);\n\n/**\n *\n */\nexport const ledgerUSBVendorId = 0x2c97;\n\n/**\n *\n */\nexport const getDeviceModel = (id: string): DeviceModel => {\n  const info = devices[id];\n  if (!info) throw new Error(\"device '\" + id + \"' does not exist\");\n  return info;\n};\n\n/**\n *\n */\nexport const identifyUSBProductId = (usbProductId: number): ?DeviceModel =>\n  devicesList.find(d => d.usbProductId === usbProductId);\n\nconst bluetoothServices: string[] = [];\nconst serviceUuidToInfos: {\n  [_: string]: BluetoothInfos\n} = {};\n\nfor (let id in devices) {\n  const deviceModel = devices[id];\n  const { bluetoothSpec } = deviceModel;\n  if (bluetoothSpec) {\n    for (let i = 0; i < bluetoothSpec.length; i++) {\n      const spec = bluetoothSpec[i];\n      bluetoothServices.push(spec.serviceUuid);\n      serviceUuidToInfos[spec.serviceUuid] = { deviceModel, ...spec };\n    }\n  }\n}\n\n/**\n *\n */\nexport const getBluetoothServiceUuids = () => bluetoothServices;\n\n/**\n *\n */\nexport const getInfosForServiceUuid = (uuid: string): ?BluetoothInfos =>\n  serviceUuidToInfos[uuid.toLowerCase()];\n\n/**\n *\n */\nexport type DeviceModel = {\n  id: string,\n  productName: string,\n  usbProductId: number,\n  bluetoothSpec?: Array<{\n    serviceUuid: string,\n    writeUuid: string,\n    notifyUuid: string\n  }>\n};\n\n/**\n *\n */\nexport type BluetoothInfos = {\n  deviceModel: DeviceModel,\n  serviceUuid: string,\n  writeUuid: string,\n  notifyUuid: string\n};\n"]}