"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class Api {
    constructor() {
        this.transact = jest.fn().mockImplementation(() => __awaiter(this, void 0, void 0, function* () {
            return {
                transaction_id: 'testid',
                processed: {
                    receipt: {
                        status: 'complete',
                    }
                }
            };
        }));
    }
}
exports.Api = Api;
class JsonRpc {
    constructor() {
        this.get_account = jest.fn().mockImplementation((account) => __awaiter(this, void 0, void 0, function* () {
            if (!account) {
                throw Error('No accountName provided');
            }
            return {
                permissions: [{
                        required_auth: {
                            keys: [{
                                    key: 'EOS11111',
                                }],
                        }
                    }],
            };
        }));
    }
} // tslint:disable-line max-classes-per-file
exports.JsonRpc = JsonRpc;
